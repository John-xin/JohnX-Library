虚函数 virtual void foo();
纯虚函数 virtual void foo()=0;

虚函数和纯虚函数，会推迟编译时间到程序运行时刻，称之为动态编译，目的是实现多态。

抽象类 - 包含至少一个纯虚函数的类，称之为抽象类，一般作为基类使用。它的派生类需要实现虚函数的定义，如果不改变虚函数，则该派生类仍然为抽象类。

接口类 - 是只包含纯虚函数的类，一般没有没有构造函数，没有成员变量，或者只包含静态常数的成员变量static const var=1, 用于表示状态。

按抽象程度递增的顺序说就是：普通类->抽象类（java中由abstract修饰的类）->接口（java中interface修饰的类）

析构函数一般是虚函数的原因：
在使用接口类的指针访问接口类的子类的实例时，当对接口类的指针做delete时，如果接口类的析构函数不是虚析构函数的话，将只会调用接口类的析构函数，
接口类的子类的析构函数将不会被调用，内存泄露将会产生，所以接口类的析构函数必须定义成虚析构函数。


多态：
使用基类的类型定义对象，可以根据赋值的子类类型，调用相应的成员函数。

例子：
class A
{
public:
    virtual void foo()
    {
        cout<<"A::foo() is called"<<endl;
    }
};
class B:public A
{
public:
    void foo()
    {
        cout<<"B::foo() is called"<<endl;
    }
};
int main(void)
{
    A *a = new B();
    a->foo();   // 在这里，a虽然是指向A的指针，但是被调用的函数(foo)却是B的!
    return 0;
}

其他补充：

声明一个纯虚函数（pure visual）的目的就是为了让派生类只继承函数接口，即接口继承。

声明一个非纯虚函数（impure visual）的目的是为了让派生类继承函数接口和缺省实现。

声明一个非虚函数（non visual）的目的是为了让派生类继承函数接口和一份强制实现。
